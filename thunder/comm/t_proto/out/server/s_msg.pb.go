// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: s_msg.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ZeroMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZeroMsg) Reset()         { *m = ZeroMsg{} }
func (m *ZeroMsg) String() string { return proto.CompactTextString(m) }
func (*ZeroMsg) ProtoMessage()    {}
func (*ZeroMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{0}
}
func (m *ZeroMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZeroMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZeroMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZeroMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZeroMsg.Merge(m, src)
}
func (m *ZeroMsg) XXX_Size() int {
	return m.Size()
}
func (m *ZeroMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ZeroMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ZeroMsg proto.InternalMessageInfo

type MessageData struct {
	Sender               int32    `protobuf:"varint,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver             int32    `protobuf:"varint,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Content              []byte   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	MsgType              MsgType  `protobuf:"varint,4,opt,name=msgType,proto3,enum=MsgType" json:"msgType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageData) Reset()         { *m = MessageData{} }
func (m *MessageData) String() string { return proto.CompactTextString(m) }
func (*MessageData) ProtoMessage()    {}
func (*MessageData) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{1}
}
func (m *MessageData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageData.Merge(m, src)
}
func (m *MessageData) XXX_Size() int {
	return m.Size()
}
func (m *MessageData) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageData.DiscardUnknown(m)
}

var xxx_messageInfo_MessageData proto.InternalMessageInfo

func (m *MessageData) GetSender() int32 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *MessageData) GetReceiver() int32 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *MessageData) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MessageData) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_Client
}

type RegisterReq struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReq) Reset()         { *m = RegisterReq{} }
func (m *RegisterReq) String() string { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()    {}
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{2}
}
func (m *RegisterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReq.Merge(m, src)
}
func (m *RegisterReq) XXX_Size() int {
	return m.Size()
}
func (m *RegisterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReq proto.InternalMessageInfo

func (m *RegisterReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RegisterAck struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterAck) Reset()         { *m = RegisterAck{} }
func (m *RegisterAck) String() string { return proto.CompactTextString(m) }
func (*RegisterAck) ProtoMessage()    {}
func (*RegisterAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{3}
}
func (m *RegisterAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterAck.Merge(m, src)
}
func (m *RegisterAck) XXX_Size() int {
	return m.Size()
}
func (m *RegisterAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterAck.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterAck proto.InternalMessageInfo

func (m *RegisterAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Send2User struct {
	MsgID                int32    `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Send2User) Reset()         { *m = Send2User{} }
func (m *Send2User) String() string { return proto.CompactTextString(m) }
func (*Send2User) ProtoMessage()    {}
func (*Send2User) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{4}
}
func (m *Send2User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Send2User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Send2User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Send2User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Send2User.Merge(m, src)
}
func (m *Send2User) XXX_Size() int {
	return m.Size()
}
func (m *Send2User) XXX_DiscardUnknown() {
	xxx_messageInfo_Send2User.DiscardUnknown(m)
}

var xxx_messageInfo_Send2User proto.InternalMessageInfo

func (m *Send2User) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *Send2User) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Broadcast struct {
	MsgID                int32    `protobuf:"varint,1,opt,name=msgID,proto3" json:"msgID,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Broadcast) Reset()         { *m = Broadcast{} }
func (m *Broadcast) String() string { return proto.CompactTextString(m) }
func (*Broadcast) ProtoMessage()    {}
func (*Broadcast) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{5}
}
func (m *Broadcast) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Broadcast) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Broadcast.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Broadcast) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broadcast.Merge(m, src)
}
func (m *Broadcast) XXX_Size() int {
	return m.Size()
}
func (m *Broadcast) XXX_DiscardUnknown() {
	xxx_messageInfo_Broadcast.DiscardUnknown(m)
}

var xxx_messageInfo_Broadcast proto.InternalMessageInfo

func (m *Broadcast) GetMsgID() int32 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *Broadcast) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type UserOnlineNtf struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserOnlineNtf) Reset()         { *m = UserOnlineNtf{} }
func (m *UserOnlineNtf) String() string { return proto.CompactTextString(m) }
func (*UserOnlineNtf) ProtoMessage()    {}
func (*UserOnlineNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{6}
}
func (m *UserOnlineNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOnlineNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOnlineNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOnlineNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOnlineNtf.Merge(m, src)
}
func (m *UserOnlineNtf) XXX_Size() int {
	return m.Size()
}
func (m *UserOnlineNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOnlineNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UserOnlineNtf proto.InternalMessageInfo

type UserOffNtf struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserOffNtf) Reset()         { *m = UserOffNtf{} }
func (m *UserOffNtf) String() string { return proto.CompactTextString(m) }
func (*UserOffNtf) ProtoMessage()    {}
func (*UserOffNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{7}
}
func (m *UserOffNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserOffNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserOffNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserOffNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserOffNtf.Merge(m, src)
}
func (m *UserOffNtf) XXX_Size() int {
	return m.Size()
}
func (m *UserOffNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UserOffNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UserOffNtf proto.InternalMessageInfo

type UserIncomeNtf struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserIncomeNtf) Reset()         { *m = UserIncomeNtf{} }
func (m *UserIncomeNtf) String() string { return proto.CompactTextString(m) }
func (*UserIncomeNtf) ProtoMessage()    {}
func (*UserIncomeNtf) Descriptor() ([]byte, []int) {
	return fileDescriptor_81666e302d8e7b3c, []int{8}
}
func (m *UserIncomeNtf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIncomeNtf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIncomeNtf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserIncomeNtf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIncomeNtf.Merge(m, src)
}
func (m *UserIncomeNtf) XXX_Size() int {
	return m.Size()
}
func (m *UserIncomeNtf) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIncomeNtf.DiscardUnknown(m)
}

var xxx_messageInfo_UserIncomeNtf proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ZeroMsg)(nil), "ZeroMsg")
	proto.RegisterType((*MessageData)(nil), "MessageData")
	proto.RegisterType((*RegisterReq)(nil), "RegisterReq")
	proto.RegisterType((*RegisterAck)(nil), "RegisterAck")
	proto.RegisterType((*Send2User)(nil), "Send2User")
	proto.RegisterType((*Broadcast)(nil), "Broadcast")
	proto.RegisterType((*UserOnlineNtf)(nil), "UserOnlineNtf")
	proto.RegisterType((*UserOffNtf)(nil), "UserOffNtf")
	proto.RegisterType((*UserIncomeNtf)(nil), "UserIncomeNtf")
}

func init() { proto.RegisterFile("s_msg.proto", fileDescriptor_81666e302d8e7b3c) }

var fileDescriptor_81666e302d8e7b3c = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0xbb, 0xaa, 0x6d, 0xc9, 0x63, 0xd5, 0x86, 0xa5, 0x14, 0x61, 0xa8, 0x30, 0xba, 0x54,
	0x6d, 0xc1, 0x14, 0xf7, 0xd8, 0x53, 0x5d, 0x43, 0x31, 0x54, 0x2d, 0xc8, 0xed, 0xc5, 0x17, 0xa3,
	0xae, 0xc6, 0x8b, 0x48, 0xb4, 0x72, 0x76, 0xd6, 0x86, 0x9c, 0xf2, 0x1a, 0x79, 0x9c, 0x1c, 0x73,
	0xcc, 0x23, 0x04, 0xe7, 0x45, 0x82, 0x64, 0x2b, 0xb1, 0x6f, 0xce, 0xf1, 0xd3, 0xf7, 0x0f, 0xff,
	0x0c, 0x5a, 0xe8, 0xd0, 0x22, 0x27, 0x39, 0x5c, 0xe9, 0xc2, 0x14, 0x7d, 0x97, 0x16, 0xa8, 0xd6,
	0xf9, 0x8e, 0x82, 0x36, 0xd8, 0x73, 0xd4, 0x45, 0x44, 0x32, 0xb8, 0x82, 0x4e, 0x84, 0x44, 0x89,
	0xc4, 0x49, 0x62, 0x12, 0xfe, 0x0e, 0x5a, 0x84, 0x2a, 0x45, 0xed, 0xb1, 0x01, 0x0b, 0x9b, 0xf1,
	0x9e, 0x78, 0x1f, 0x1c, 0x8d, 0x02, 0xb3, 0x0d, 0x6a, 0xcf, 0xaa, 0xcc, 0x13, 0x73, 0x0f, 0x6c,
	0x51, 0x28, 0x83, 0xca, 0x78, 0xaf, 0x07, 0x2c, 0x74, 0xe3, 0x1a, 0x79, 0x00, 0x76, 0x4e, 0xf2,
	0xef, 0xe5, 0x0a, 0xbd, 0xc6, 0x80, 0x85, 0xdd, 0x91, 0x33, 0x8c, 0x76, 0x1c, 0xd7, 0x22, 0x78,
	0x0f, 0x9d, 0x18, 0x65, 0x46, 0x06, 0x75, 0x8c, 0x17, 0xbc, 0x0b, 0x56, 0x96, 0x56, 0xe5, 0x8d,
	0xd8, 0xca, 0xd2, 0xe0, 0xc3, 0xb3, 0xfe, 0x2e, 0xce, 0xca, 0x2e, 0x5a, 0x0b, 0x81, 0x44, 0x55,
	0xc6, 0x89, 0x6b, 0x0c, 0xbe, 0x41, 0x7b, 0x86, 0x2a, 0x1d, 0xfd, 0x23, 0xd4, 0xfc, 0x2d, 0x34,
	0x73, 0x92, 0xd3, 0xc9, 0xfe, 0x8a, 0x1d, 0x1c, 0x2e, 0x6a, 0x1d, 0x2d, 0x5a, 0x0e, 0x8f, 0x75,
	0x91, 0xa4, 0x22, 0x21, 0xf3, 0xe2, 0xe1, 0x1e, 0xbc, 0x29, 0x4b, 0xff, 0xa8, 0xf3, 0x4c, 0xe1,
	0x6f, 0xb3, 0x0c, 0x5c, 0x80, 0xea, 0xc3, 0x72, 0x59, 0xd2, 0x5e, 0x4f, 0x95, 0x28, 0xf2, 0x52,
	0x8f, 0x6e, 0x18, 0xf4, 0xea, 0x9b, 0x66, 0xa8, 0x37, 0x99, 0x40, 0xfe, 0x19, 0xda, 0x3f, 0x50,
	0x19, 0xd4, 0x11, 0x49, 0xee, 0x0e, 0x0f, 0x7e, 0x49, 0xff, 0x88, 0x42, 0xf6, 0x85, 0xf1, 0x8f,
	0x60, 0xff, 0x4c, 0x0c, 0x9e, 0x1c, 0xcd, 0x4f, 0x8a, 0x7e, 0x02, 0xe7, 0x57, 0x21, 0x33, 0x75,
	0x42, 0x76, 0xec, 0xdd, 0x6e, 0x7d, 0x76, 0xb7, 0xf5, 0xd9, 0xfd, 0xd6, 0x67, 0xd7, 0x0f, 0xfe,
	0xab, 0x79, 0x8b, 0x50, 0x6f, 0x50, 0xff, 0x6f, 0x55, 0x2f, 0xec, 0xeb, 0x63, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xdf, 0xb4, 0x1a, 0x9b, 0x7e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegisterServiceClient is the client API for RegisterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegisterServiceClient interface {
	// rpc Register(RegisterReq) returns (RegisterAck);
	CenterMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_CenterMsgClient, error)
	GateMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_GateMsgClient, error)
	GameMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_GameMsgClient, error)
	LoginMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_LoginMsgClient, error)
}

type registerServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegisterServiceClient(cc *grpc.ClientConn) RegisterServiceClient {
	return &registerServiceClient{cc}
}

func (c *registerServiceClient) CenterMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_CenterMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegisterService_serviceDesc.Streams[0], "/RegisterService/CenterMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerServiceCenterMsgClient{stream}
	return x, nil
}

type RegisterService_CenterMsgClient interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ClientStream
}

type registerServiceCenterMsgClient struct {
	grpc.ClientStream
}

func (x *registerServiceCenterMsgClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerServiceCenterMsgClient) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerServiceClient) GateMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_GateMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegisterService_serviceDesc.Streams[1], "/RegisterService/GateMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerServiceGateMsgClient{stream}
	return x, nil
}

type RegisterService_GateMsgClient interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ClientStream
}

type registerServiceGateMsgClient struct {
	grpc.ClientStream
}

func (x *registerServiceGateMsgClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerServiceGateMsgClient) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerServiceClient) GameMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_GameMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegisterService_serviceDesc.Streams[2], "/RegisterService/GameMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerServiceGameMsgClient{stream}
	return x, nil
}

type RegisterService_GameMsgClient interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ClientStream
}

type registerServiceGameMsgClient struct {
	grpc.ClientStream
}

func (x *registerServiceGameMsgClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerServiceGameMsgClient) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerServiceClient) LoginMsg(ctx context.Context, opts ...grpc.CallOption) (RegisterService_LoginMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegisterService_serviceDesc.Streams[3], "/RegisterService/LoginMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerServiceLoginMsgClient{stream}
	return x, nil
}

type RegisterService_LoginMsgClient interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ClientStream
}

type registerServiceLoginMsgClient struct {
	grpc.ClientStream
}

func (x *registerServiceLoginMsgClient) Send(m *MessageData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerServiceLoginMsgClient) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterServiceServer is the server API for RegisterService service.
type RegisterServiceServer interface {
	// rpc Register(RegisterReq) returns (RegisterAck);
	CenterMsg(RegisterService_CenterMsgServer) error
	GateMsg(RegisterService_GateMsgServer) error
	GameMsg(RegisterService_GameMsgServer) error
	LoginMsg(RegisterService_LoginMsgServer) error
}

// UnimplementedRegisterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegisterServiceServer struct {
}

func (*UnimplementedRegisterServiceServer) CenterMsg(srv RegisterService_CenterMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method CenterMsg not implemented")
}
func (*UnimplementedRegisterServiceServer) GateMsg(srv RegisterService_GateMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method GateMsg not implemented")
}
func (*UnimplementedRegisterServiceServer) GameMsg(srv RegisterService_GameMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method GameMsg not implemented")
}
func (*UnimplementedRegisterServiceServer) LoginMsg(srv RegisterService_LoginMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method LoginMsg not implemented")
}

func RegisterRegisterServiceServer(s *grpc.Server, srv RegisterServiceServer) {
	s.RegisterService(&_RegisterService_serviceDesc, srv)
}

func _RegisterService_CenterMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServiceServer).CenterMsg(&registerServiceCenterMsgServer{stream})
}

type RegisterService_CenterMsgServer interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type registerServiceCenterMsgServer struct {
	grpc.ServerStream
}

func (x *registerServiceCenterMsgServer) Send(m *MessageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerServiceCenterMsgServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterService_GateMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServiceServer).GateMsg(&registerServiceGateMsgServer{stream})
}

type RegisterService_GateMsgServer interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type registerServiceGateMsgServer struct {
	grpc.ServerStream
}

func (x *registerServiceGateMsgServer) Send(m *MessageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerServiceGateMsgServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterService_GameMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServiceServer).GameMsg(&registerServiceGameMsgServer{stream})
}

type RegisterService_GameMsgServer interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type registerServiceGameMsgServer struct {
	grpc.ServerStream
}

func (x *registerServiceGameMsgServer) Send(m *MessageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerServiceGameMsgServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegisterService_LoginMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServiceServer).LoginMsg(&registerServiceLoginMsgServer{stream})
}

type RegisterService_LoginMsgServer interface {
	Send(*MessageData) error
	Recv() (*MessageData, error)
	grpc.ServerStream
}

type registerServiceLoginMsgServer struct {
	grpc.ServerStream
}

func (x *registerServiceLoginMsgServer) Send(m *MessageData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerServiceLoginMsgServer) Recv() (*MessageData, error) {
	m := new(MessageData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RegisterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RegisterService",
	HandlerType: (*RegisterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CenterMsg",
			Handler:       _RegisterService_CenterMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GateMsg",
			Handler:       _RegisterService_GateMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GameMsg",
			Handler:       _RegisterService_GameMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "LoginMsg",
			Handler:       _RegisterService_LoginMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "s_msg.proto",
}

func (m *ZeroMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZeroMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZeroMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *MessageData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgType != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSMsg(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Receiver != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.Receiver))
		i--
		dAtA[i] = 0x10
	}
	if m.Sender != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.Sender))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegisterAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Send2User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Send2User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Send2User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSMsg(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Broadcast) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Broadcast) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Broadcast) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSMsg(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintSMsg(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserOnlineNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOnlineNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOnlineNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UserOffNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOffNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserOffNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *UserIncomeNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIncomeNtf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIncomeNtf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovSMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZeroMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != 0 {
		n += 1 + sovSMsg(uint64(m.Sender))
	}
	if m.Receiver != 0 {
		n += 1 + sovSMsg(uint64(m.Receiver))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSMsg(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovSMsg(uint64(m.MsgType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSMsg(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Send2User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovSMsg(uint64(m.MsgID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Broadcast) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovSMsg(uint64(m.MsgID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSMsg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserOnlineNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserOffNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserIncomeNtf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSMsg(x uint64) (n int) {
	return sovSMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZeroMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZeroMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZeroMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			m.Receiver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Receiver |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Send2User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Send2User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Send2User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Broadcast) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Broadcast: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Broadcast: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSMsg
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOnlineNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOnlineNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOnlineNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOffNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOffNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOffNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIncomeNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIncomeNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIncomeNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSMsg = fmt.Errorf("proto: unexpected end of group")
)
